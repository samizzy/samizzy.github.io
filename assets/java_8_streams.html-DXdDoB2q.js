import{_ as l,c,a as e,b as a,d as s,e as p,w as o,r as i,o as u}from"./app-Bguh2_f1.js";const r="/lambda.jpg",d={},k={class:"custom-container warning"};function m(v,n){const t=i("RouteLink");return u(),c("div",null,[n[13]||(n[13]=e('<h2 id="the-change-you-need-streams-and-lambda" tabindex="-1"><a class="header-anchor" href="#the-change-you-need-streams-and-lambda"><span>The Change you need: Streams and Lambda</span></a></h2><p>After learning about streams and lambda in Java 8, my style of writing code underwent a fundamental change. It reduced bugs in my code, enabled me to think more in terms of functional programming and best of all it reduced the number of lines I had to write for a functionality and made the code even more readable!</p><p>However, if you are not familar with streams and lambda then it will this concept will seem very alien and you will stay away from it for the <strong>REST OF YOUR LIFE!</strong></p><p>So I hope after reading this post you will be able to avoid that fate ðŸ˜ƒ.</p><img src="'+r+`"><p><sub>Where my Half-Life people at?</sub></p><h2 id="what-are-streams" tabindex="-1"><a class="header-anchor" href="#what-are-streams"><span>What are Streams?</span></a></h2><p>In Java 8, Streams were introduced and they basically allow us to use write code in a more functional way. Streams are <strong>LAZY</strong>, meaning unless some terminal operation is done on them, they will not execute and return a result.</p><p>How do you get a stream? The collections api has been enhanced to include the <strong><code>.stream()</code></strong> method which returns a stream. Lets look at a example</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//Imagine you getting this list from somewhere</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        numList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        numList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        numList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        numList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        numList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        numList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//now we can call .stream() to get a stream</span></span>
<span class="line">        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numStream <span class="token operator">=</span> numList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Above is how you will usually use it, you already have some collection and want to use stream programming. We can also directly initialize a stream.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//We can use the static method &#39;of(T t1, T t2....)&#39; </span></span>
<span class="line"><span class="token comment">//present on the Stream interface.</span></span>
<span class="line"><span class="token comment">//Useful for generating stream from a finite or small number of elements.</span></span>
<span class="line"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> finiteNumStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//We can use \`.iterate()\` to get a infinite stream</span></span>
<span class="line"><span class="token comment">//1st argument is the initial element.</span></span>
<span class="line"><span class="token comment">//2nd argument is a special variation of Function Interface</span></span>
<span class="line"><span class="token comment">//with input and output of same type which is </span></span>
<span class="line"><span class="token comment">//called UnaryOperator Interface.</span></span>
<span class="line"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> infiniteNumStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">-&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> anotherInfiniteStream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">nextInt</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//if we print the infinite streams , it will never end... </span></span>
<span class="line"><span class="token comment">//and it might not really be useful, so there ways to limit</span></span>
<span class="line"><span class="token comment">//the stream </span></span>
<span class="line">infiniteNumStream<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//take the 10 elements then stop</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are also classes to Initialise streams for specific Types. They include <code>IntStream, LongStream, DoubleStream</code>. They include static methods what we saw above and extra methods for the specific Data Type. You can check them out ðŸ˜ƒ</p><h2 id="what-is-a-lambda" tabindex="-1"><a class="header-anchor" href="#what-is-a-lambda"><span>What is a Lambda?</span></a></h2><p>If you have seen streams code before and you get confused then I guess it must be because of the mysterious arrows that people keep throwing around in the code. Those are lambdas.</p><p>I remember pulling my hair out because I couldnt understand the purpose or their syntax.</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Lambda</p><p>A lambda is a anonymous function, it does not need a function name, input type and return type because it can be inferred.</p></div><p>There are some simple rules for defining a lambda.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//If your function has one input</span></span>
<span class="line">a <span class="token operator">-&gt;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">//If your function has more than one input</span></span>
<span class="line"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token punctuation">)</span> <span class="token operator">-&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//If your function needs no input then we need empty round brackets.</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//The arrow indicates the end of input arguments and start of logic.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Above are rules for input.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//If your logic is of one line</span></span>
<span class="line">a <span class="token operator">-&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//If your logic is of one line and you need to return result</span></span>
<span class="line"><span class="token comment">//boolean in this case.</span></span>
<span class="line">a <span class="token operator">-&gt;</span> a <span class="token operator">==</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//If your logic is of multiple lines </span></span>
<span class="line"><span class="token comment">//then surround it with curly braces</span></span>
<span class="line"><span class="token comment">//notice the use of semi colons here.</span></span>
<span class="line">a <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token keyword">int</span> next <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">//If your logic is of multiple lines </span></span>
<span class="line"><span class="token comment">//and you need to give back result, use return.</span></span>
<span class="line">a <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token generics"><span class="token punctuation">&lt;</span>10<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Above were rules for the body and returning results.</p><div class="custom-container danger"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M10 10l4 4m0-4l-4 4"></path></g></svg><p class="custom-container-title">Something&#39;s</p><p>But wait how do we find the type of input arguments and the type of output arguments or the function even returns any output?</p></div><p>If you asked the above question then nice!! Well that can be inferred by the Functional Interface.</p><p>Look at these examples to understand better.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//from the generics, it can infer \`a\` is of type Integer,</span></span>
<span class="line"><span class="token comment">//nothing is returned.</span></span>
<span class="line"><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> consInt <span class="token operator">=</span> a <span class="token operator">-&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//from the generics it can infer \`a\` is of type Integer</span></span>
<span class="line"><span class="token comment">//and return type is also of type Integer</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> funcInt <span class="token operator">=</span> a <span class="token operator">-&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//The above effect can be achieved in a similar way in method declarations.</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodCons</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodFunc</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//then when using these methods we can directly pass</span></span>
<span class="line"><span class="token function">methodCons</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">methodFunc</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)),a("div",k,[n[5]||(n[5]=e('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">Note</p>',2)),a("p",null,[n[2]||(n[2]=s("I would advise you to read the post on ")),p(t,{to:"/blogs/technology/2020/July/java_8_features.html#function-interface"},{default:o(()=>n[0]||(n[0]=[s("Functional Interfaces")])),_:1,__:[0]}),n[3]||(n[3]=s(" first if you find mentions of Functional Interfaces alien. Also look at ")),p(t,{to:"/blogs/technology/2020/July/java_8_features.html#way-1"},{default:o(()=>n[1]||(n[1]=[s("this")])),_:1,__:[1]}),n[4]||(n[4]=s(" to appreciate lambdas a bit more."))])]),n[14]||(n[14]=e(`<div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">Note</p><p>Did you see above, how the <strong>same</strong> lambda expression can mean differently according to context?</p></div><p>Thats all basically it for lambdas, there is also an alternative way to use Functional Interfaces that is called <strong>Method References</strong>.</p><h2 id="stream-operations-and-lambdas" tabindex="-1"><a class="header-anchor" href="#stream-operations-and-lambdas"><span>Stream Operations And Lambdas</span></a></h2><p>Earlier I said streams allow us to write code in functional way but I didnt say how, let&#39;s take a look at some examples. I also ofcourse use lambdas along the way. We will first solve them the traditional way and then Java 8 way.</p><h3 id="problem-1" tabindex="-1"><a class="header-anchor" href="#problem-1"><span>Problem 1</span></a></h3><p>Find strings in a list which start with &#39;tr&#39; and end with &#39;ed&#39;, we need a max of 5 such strings. After finding, take the size of each string then return the sum of sizes.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//Traditional Way</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">START</span> <span class="token operator">=</span> <span class="token string">&quot;tr&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">END</span> <span class="token operator">=</span> <span class="token string">&quot;ed&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">START</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token constant">END</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                sum <span class="token operator">+=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A traditional approach would more or less look like above. It has a variable for maintaining <code>count</code>, <code>sum</code>. Iterate the loop, check for condition, if true add the size to sum, check if we got 5 elements then break and at the end return <code>sum</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//Java 8 Way</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">START</span> <span class="token operator">=</span> <span class="token string">&quot;tr&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">END</span> <span class="token operator">=</span> <span class="token string">&quot;ed&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//filter by our custom condition, take only 5 elem at max,</span></span>
<span class="line">    <span class="token comment">// get size of string and then return sum of all sizes.</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">START</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token constant">END</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">                <span class="token function">mapToLong</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above solution looks great! It is much simpler to understand and is compact.</p>`,10)),a("p",null,[n[7]||(n[7]=s("Here ")),n[8]||(n[8]=a("code",null,"filter",-1)),n[9]||(n[9]=s(" is a operation/method on Stream, that accepts a predicate. If you have read the post on ")),p(t,{to:"/blogs/technology/2020/July/java_8_features.html#predicate-interface"},{default:o(()=>n[6]||(n[6]=[s("Functional Interfaces")])),_:1,__:[6]}),n[10]||(n[10]=s(" you will remember that ")),n[11]||(n[11]=a("code",null,"Predicate",-1)),n[12]||(n[12]=s(" Interface, takes some input, does some logic and return boolean. Our logic here is for string matching at start and end."))]),n[15]||(n[15]=e(`<p>We looked at the <code>limit()</code> earlier, it limits the number of elements to next stage.</p><p>Now lets take a look at <code>map</code> because in your life you would be using it many times. There are many methods which start with keyword <code>map</code> on streams, they all basically transform a value. Here we are transforming from <code>String</code> to length of string (<code>Integer</code>). If you look closely at <code>map</code> methods you will find they all accept some kind of <code>Function</code> Interface.</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Remember</p><p>Streams are lazy in nature, therefore use of <code>sum</code> method is very important here, because use of this method signifies the start of processing as it&#39;s a terminal operation.</p></div><h4 id="time-complexity" tabindex="-1"><a class="header-anchor" href="#time-complexity"><span>Time complexity</span></a></h4><p>The time complexity of traditional approach is O(n). What do you think is the complexity for stream approach? It&#39;s O(n) as well. It is important to understand the why.</p><p>When you use streams, every operation on the stream is performed one by one on each element, unless a element has finished going through all operations, the other elements following it are kept on hold. It follows the same pattern as the traditional approach if you think about it.</p><p>There are some exceptions to the rule, if the element is filtered out in between, then the next element can start. Operations like <code>filter</code> can drop elements for the next stage.</p><h3 id="problem-2" tabindex="-1"><a class="header-anchor" href="#problem-2"><span>Problem 2</span></a></h3><p>You are given a list of list of strings. You have to perform check on the nested list to see if it&#39;s at least 5 in size. Trim all strings, if they are any of reserved keywords remove them and return only unique strings.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//Traditional Way</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUniqueStrings</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allLists<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reservedKeywords<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nestedList <span class="token operator">:</span> allLists<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>nestedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">String</span> trimmed <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reservedKeywords<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>trimmed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The traditional way actually doesnt look that bad, does it? Lemme know ðŸ˜ƒ</p><p>Lets move onto java 8 way.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//Java 8 Way</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUniqueStrings</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allLists<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reservedKeywords<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> allLists<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>list <span class="token operator">-&gt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">flatMap</span><span class="token punctuation">(</span> list <span class="token operator">-&gt;</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">                <span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>str <span class="token operator">-&gt;</span> <span class="token operator">!</span>reservedKeywords<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">                    <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above stream operations/methods should look similar, the new operations here are <code>flatMap</code> and <code>collect</code>.</p><p>Operations <code>map</code> and <code>flatMap</code> are very similar except that the <code>flatMap</code> operation signifies that the logic inside lambda itself returns stream, so all flatMap does it <em>flattens</em> all such returned streams. Flatten here means that it joins all such streams and returns a single stream. We have to do this because our further operations operate on a individual string and not on individual list.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//Function Signature in map</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token comment">//vs</span></span>
<span class="line"><span class="token comment">//Function Signature in flatMap</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">B</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The operation <code>collect</code> allows us to convert our streams into Collections. Why couldnt we just return Stream? Remember streams are lazy and unless we do some terminal operation (<code>collect</code> is terminal), no processing has actually occured. So returning a Stream would mean doing no processing (<em>although it&#39;s upto you to decide what you want out of your methods, here we want a <code>Collection</code></em>).</p><p>The <code>collect</code> operation is aptly named as it allows us to <em>collect</em> our stream into a collection, therefore it&#39;s also a terminal operation. The <code>collect</code> operation accepts a <code>Collector</code> and the <code>Collectors</code> utility class provides us a lot of ready made Collectors. We could have used <code>Collectors.toList()</code>, if the problem said we didnt need to worry about uniqueness. The Collectors class is very powerful and contains a lot of methods, do check it out!</p><h3 id="problem-3" tabindex="-1"><a class="header-anchor" href="#problem-3"><span>Problem 3</span></a></h3><p>You are given a list of strings, group the strings by the size and return a <code>Map&lt;Integer, List&lt;String&gt;&gt;</code> where key is size and list are the grouped strings.</p><p>The traditional way is pretty straight forward.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//Tradtitional Way</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupBySize</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            newList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now for the Java 8 way! Behold!</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//Java 8 Way</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupBySize</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span></span>
<span class="line">                <span class="token function">groupingBy</span><span class="token punctuation">(</span></span>
<span class="line">                    str <span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                    <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>str <span class="token operator">-&gt;</span> str<span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is times like this where I am afraid to say that Java 8 way is better or the code is more readable or simpler... However if you read the Api docs after a while this does become true.</p><p>So lets remember what we want to do, we just want to group our strings by size.</p><p>So for that purpose we are using the Collectors.groupingBy api, when using the api we need some way to say to api, that given a string here is how you get a key. This is done on line 7.</p><p>Now at line 8, we have the freedom to provide the implementation of our <code>Map</code> that we want to return. There are <code>HashMap, TreeMap, LinkedHashMap</code> etc, options available to us, we have used <code>HashMap</code>.</p><p>Finally at line 9, we get to say to the api, that we want to group the values by using a <code>List</code>. Here also we could have used another collection like <code>Set</code> or even another <code>Map</code>.</p><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>So that&#39;s it for Streams and Lambdas! There plenty more things you can do, so read the api docs!</p>`,31))])}const g=l(d,[["render",m]]),b=JSON.parse('{"path":"/blogs/technology/2020/July/java_8_streams.html","title":"Java 8 Streams and Lambda","lang":"en-US","frontmatter":{"title":"Java 8 Streams and Lambda","author":"Samrat Saha","date":"2020-07-20T00:00:00.000Z","tags":["intermediate","java","java 8","features","functional interfaces","streams","lambdas"],"categories":["technology"]},"headers":[{"level":2,"title":"The Change you need: Streams and Lambda","slug":"the-change-you-need-streams-and-lambda","link":"#the-change-you-need-streams-and-lambda","children":[]},{"level":2,"title":"What are Streams?","slug":"what-are-streams","link":"#what-are-streams","children":[]},{"level":2,"title":"What is a Lambda?","slug":"what-is-a-lambda","link":"#what-is-a-lambda","children":[]},{"level":2,"title":"Stream Operations And Lambdas","slug":"stream-operations-and-lambdas","link":"#stream-operations-and-lambdas","children":[{"level":3,"title":"Problem 1","slug":"problem-1","link":"#problem-1","children":[]},{"level":3,"title":"Problem 2","slug":"problem-2","link":"#problem-2","children":[]},{"level":3,"title":"Problem 3","slug":"problem-3","link":"#problem-3","children":[]}]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"createdTime":1595185697000,"updatedTime":1750112300000,"contributors":[{"name":"Samrat Saha","email":"samizzy18@gmail.com","commits":1}]},"filePathRelative":"blogs/technology/2020/July/java_8_streams.md"}');export{g as comp,b as data};
