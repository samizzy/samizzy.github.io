import{_ as r,c as u,a as o,b as s,e,w as t,d as a,r as l,o as d}from"./app-Bguh2_f1.js";const c="/java_beans.jpg",k={},m={class:"table-of-contents"},v={class:"custom-container tip"};function h(g,n){const p=l("router-link"),i=l("RouteLink");return d(),u("div",null,[n[12]||(n[12]=o('<h2 id="java-8-isnt-it-very-old-now" tabindex="-1"><a class="header-anchor" href="#java-8-isnt-it-very-old-now"><span>Java 8? Isnt it very old now?</span></a></h2><p>Yes, Java 8 has become quite old but it is still the most popular Java version in use now. In this post we will go through some Java 8 features and try to understand them. I find many of them really useful and I thought would be awesome to share them.</p><p><img src="'+c+'" alt="java_beans"><img src="'+c+'"></p><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">Note</p><p>Originally I had planned to cover many features but the post was getting very long, so I will break it into several smaller posts. This one covers functional interfaces.</p></div>',4)),s("nav",m,[s("ul",null,[s("li",null,[e(p,{to:"#java-8-isnt-it-very-old-now"},{default:t(()=>n[0]||(n[0]=[a("Java 8? Isnt it very old now?")])),_:1,__:[0]})]),s("li",null,[e(p,{to:"#before-diving-into-the-features"},{default:t(()=>n[1]||(n[1]=[a("Before diving into the features..")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#functional-interfaces"},{default:t(()=>n[2]||(n[2]=[a("Functional Interfaces")])),_:1,__:[2]}),s("ul",null,[s("li",null,[e(p,{to:"#function-interface"},{default:t(()=>n[3]||(n[3]=[a("Function Interface")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#consumer-interface"},{default:t(()=>n[4]||(n[4]=[a("Consumer Interface")])),_:1,__:[4]})]),s("li",null,[e(p,{to:"#supplier-interface"},{default:t(()=>n[5]||(n[5]=[a("Supplier Interface")])),_:1,__:[5]})]),s("li",null,[e(p,{to:"#predicate-interface"},{default:t(()=>n[6]||(n[6]=[a("Predicate Interface")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#other-interfaces"},{default:t(()=>n[7]||(n[7]=[a("Other Interfaces")])),_:1,__:[7]})])])])])]),n[13]||(n[13]=o(`<h2 id="before-diving-into-the-features" tabindex="-1"><a class="header-anchor" href="#before-diving-into-the-features"><span>Before diving into the features..</span></a></h2><p>There is something called generics in Java and many of the features we will look at use this heavily. What are generics? They allow you to write classes/methods/collections with type safety.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameList  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//addAll(nameList) &lt;--- This wont compile!</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int</span><span class="token punctuation">&gt;</span></span> numList<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Int</span> num<span class="token operator">:</span> numList<span class="token punctuation">)</span> sum<span class="token operator">+=</span>num</span>
<span class="line">        <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above simple example, using <code>addAll()</code> method with <code>nameList</code> wont work as their types dont match. So the compiler throws an error and stops us from doing something stupid. But remember the information about types is only maintained during compile time and at run time this information is removed, this is called <strong>Type Erasure</strong> in Java.</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Think</p><p>Ever wondered why the compiler throws error when you try to use method overloading with generics?</p></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">//This class wont compile</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nameList<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numList<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The compiler complains because at run time, the part with <code>&lt;Integer&gt;</code> and <code>&lt;String&gt;</code> is removed and then both method signatures look exactly the same as they both have same names and accept a <code>List&lt;Object&gt;</code>.</p><h2 id="functional-interfaces" tabindex="-1"><a class="header-anchor" href="#functional-interfaces"><span>Functional Interfaces</span></a></h2><p>In Java 8, a new package <strong>java.util.function</strong> was introduced, this package contains a total of 43 interfaces i.e 43 functional interfaces. Does this mean all the functional interfaces are defined in this package? No there are also others which have existed before Java 8, we will make a note of them later. Now it doesnt meant you have to remember each interface, even I dont but we shall go through a few core ones as many of the other ones are just special cases of these.</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Definition</p><p>An interface which only consists of a <em>single abstract</em> method is called a <strong>Functional Interface.</strong></p></div><p>Now lets look at some of them. In this section you will only find the description, they will actually be used in subsequent sections. The functional interfaces written here will only show the abstract method (they contain other methods as well) as that will suffice for our understanding.</p><h3 id="function-interface" tabindex="-1"><a class="header-anchor" href="#function-interface"><span>Function Interface</span></a></h3><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">Note</p><p>Do not get confused between Function and Functional. Function Interface is one of the type of Functional Interfaces in Java.</p></div><p>What is a function? a function is something that takes an input and gives an output. Thats basically the Function Interface. (all other interfaces also have one liner definitions).</p><p>Lets look at the interface definition.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Don&#39;t let the generics scare you!</strong> The interface signature <strong><code>Function&lt;T, R&gt;</code></strong> just says that <strong><code>T</code></strong> is Type of input parameter and <strong><code>R</code></strong> is the Type of output parameter. If you look at the <strong><code>R apply(T t)</code></strong> you will understand this.</p><p>Also one thing to note is whenever a interface has 2 Type parameters, the first one is usually for input and the latter is for output, this not a rule but the general trend followed, ofcourse you will find many examples where this is not followed.</p><p>Even though I said we will look at the usages later, lets have a quick look how this can be used so that you will be interested to learn further 😛</p><p>Lets say you are writing a method.</p><ul><li>That has to encode a string in particular format and return encoded string.</li><li>The strings are actually made from a Java Class.</li><li>The string is basically a representation of that class in 2 formats: Json or Xml</li></ul><p>First lets write up part of the code that is not really that relevant to our example.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//skipping getter/setters to avoid clutter</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//these class could just contain static</span></span>
<span class="line">    <span class="token comment">//methods to convert</span></span>
<span class="line">    <span class="token comment">//but thats not the focus here.</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PersonToJson</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token function">toJsonString</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;{name:&quot;</span><span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;, age&quot;</span><span class="token operator">+</span> person<span class="token punctuation">.</span>age<span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PersonToXml</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">public</span> <span class="token function">toXmlString</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;&lt;Person&gt;&lt;name&gt;&quot;</span><span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&quot;&lt;/name&gt;&lt;age&gt;&quot;</span><span class="token operator">+</span> person<span class="token punctuation">.</span>age<span class="token operator">+</span> <span class="token string">&quot;&lt;/age&gt;&lt;/Person&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So now that we have the POJOs and converters ready, let&#39;s write our method.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token comment">//We have used method overloading here. </span></span>
<span class="line">    <span class="token comment">//Both methods take a converter and a person object. </span></span>
<span class="line">    <span class="token comment">//Apply the converter to person and then </span></span>
<span class="line">    <span class="token comment">//return encoded string.</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encodeToUTF8</span><span class="token punctuation">(</span><span class="token class-name">PersonToJson</span> jsConverter<span class="token punctuation">,</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> person <span class="token operator">=</span> jsConverter<span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encodeToUTF8</span><span class="token punctuation">(</span><span class="token class-name">PersonToXml</span> xmlConverter<span class="token punctuation">,</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> person <span class="token operator">=</span> xmlConverter<span class="token punctuation">.</span><span class="token function">toXmlString</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Above example was without Functional interface, now lets do one with it.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encodeToUTF8</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> converter<span class="token punctuation">,</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> person <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See it has simplified soooooo much!!</p><p>How will someone use this method? I see 2 ways (actually only one is practical).</p><h4 id="way-1" tabindex="-1"><a class="header-anchor" href="#way-1"><span>Way 1</span></a></h4><p>(Dont worry if you dont understand this, move on to way 2)</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Immortal&quot;</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> jsonFunc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">PersonToJson</span> jsonConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token annotation punctuation">@override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> jsonConverter<span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> xmlFunc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">PersonToXml</span> xmlConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonToXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token annotation punctuation">@override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> xmlConverter<span class="token punctuation">.</span><span class="token function">toXmlString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token function">encodeToUTF8</span><span class="token punctuation">(</span>jsonFunc<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> xml <span class="token operator">=</span> <span class="token function">encodeToUTF8</span><span class="token punctuation">(</span>xmlFunc<span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="way-2" tabindex="-1"><a class="header-anchor" href="#way-2"><span>Way 2</span></a></h4><p>(or as I would like to call it Java 8 way)</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Immortal&quot;</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">PersonToJson</span> jsonConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">PersonToXml</span> xmlConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonToXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token function">encodeToUTF8</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span> jsonConverter<span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> xml <span class="token operator">=</span> <span class="token function">encodeToUTF8</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span> xmlConverter<span class="token punctuation">.</span><span class="token function">toXmlString</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have used a Java 8 feature called Lambda, lambdas are basically anonymous methods (we dont need to do <strong><code>new Function()</code></strong> etc). As you will see Functional interfaces were made to be used with Lambdas.</p><p>Now that we have an idea how they will be used, we will quickly go through the rest of the interfaces.</p>`,37)),s("div",v,[n[11]||(n[11]=o('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p>',2)),s("p",null,[n[9]||(n[9]=a("Checkout ")),e(i,{to:"/blogs/technology/2020/July/java_8_streams.html#what-is-a-lambda"},{default:t(()=>n[8]||(n[8]=[a("this")])),_:1,__:[8]}),n[10]||(n[10]=a(" on lambdas to learn more!"))])]),n[14]||(n[14]=o(`<h3 id="consumer-interface" tabindex="-1"><a class="header-anchor" href="#consumer-interface"><span>Consumer Interface</span></a></h3><p>The Consumer Interface is very simply it only takes a input of Type <strong><code>T</code></strong> and does something but does not return anything thats why it has return type <strong><code>void</code></strong>.</p><p>What are some existing methods that have this behaviour? Imagine <strong><code>System.out.println</code></strong> it takes in input object and prints to console.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I can write sysout as below,</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> consumer <span class="token operator">=</span> o <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>cool right?</p><h3 id="supplier-interface" tabindex="-1"><a class="header-anchor" href="#supplier-interface"><span>Supplier Interface</span></a></h3><p>The Supplier Interface is the opposite of Consumer Interface, it only returns something of Type <strong><code>T</code></strong></p><p>This method seems strange, just return something? How can you return something without input? <strong>Ofcourse you can!</strong> Alrite lets imagine a pure example of this, how about a Random Number Generator?</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="predicate-interface" tabindex="-1"><a class="header-anchor" href="#predicate-interface"><span>Predicate Interface</span></a></h3><p>The Predicate Interface tests a expression and returns a boolean. It accepts an input of Type <strong><code>T</code></strong>.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have been paying attention, you will see that Predicate Interface is a special case of Function Interface which takes Type <strong><code>T</code></strong> as input and <strong><code>boolean</code></strong> as output.</p><p>So it can be written as,</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="other-interfaces" tabindex="-1"><a class="header-anchor" href="#other-interfaces"><span>Other Interfaces</span></a></h3><p>There are other interfaces which are just variations of these above interfaces. There are some with having a prefix <strong>Bi</strong> meaning they take 2 input arguments, they maybe of different Types.</p><p>So there is BiConsumer, BiPredicate, BiFunction. For eg,</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//method takes in 2 parameters instead</span></span>
<span class="line">    <span class="token comment">//of 1 hence the name Bi</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Why do such interfaces exist, well it is a common use case right! Many times you write methods which accept 2 paramters.</p><p>But what happens when you need to write more than 2 parameters? In that case you can convert a BiFunction by partially supplying one of the values.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token class-name">String</span> outside <span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//This function takes 2 inputs String,String</span></span>
<span class="line">    <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> func <span class="token operator">=</span></span>
<span class="line">     <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> outside<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">     <span class="token comment">// Notice we have supplied \`outside\` during functional declaration.</span></span>
<span class="line">     <span class="token comment">//As our function is closing over the context,</span></span>
<span class="line">     <span class="token comment">//in this case that is variable \`outside\`, it can also be called closure.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ofcourse it&#39;s not always possible we have any of the 3 values at declaration in that case there are other alternatives, some include defining your own interfaces.</p><p>There are other variations such as Predicate which is just a special case of Function as we saw earlier. Other examples are <code>LongConsumer, IntConsumer, DoubleToLongFunction</code> etc etc. You will observe that these type of special variations involve use of primitives instead of <code>Long, Integer, Boolean</code>.</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Why</p><p>These special variation with primitives are available because people want to avoid use of autoboxing (which can use extra memory as compared to primitives) and ofcourse because generics dont support primitives.</p></div><p>There are other Functional Interface outside of this package like Runnable Interface. Runnable takes nothing and returns nothing, pretty simple right?</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Remember</p><p>What makes a interface a Functional interface is if it has only one abstract method.</p></div><p>Anyways that&#39;s all for now. I will write about Lambdas, Streams and Method References next as that is needed for more clarity about actually using Functional interfaces.</p>`,30))])}const b=r(k,[["render",h]]),f=JSON.parse('{"path":"/blogs/technology/2020/July/java_8_features.html","title":"Java 8 Functional Interfaces","lang":"en-US","frontmatter":{"title":"Java 8 Functional Interfaces","author":"Samrat Saha","date":"2020-07-18T00:00:00.000Z","tags":["intermediate","java","java 8","features","functional interfaces"],"categories":["technology"]},"headers":[{"level":2,"title":"Java 8? Isnt it very old now?","slug":"java-8-isnt-it-very-old-now","link":"#java-8-isnt-it-very-old-now","children":[]},{"level":2,"title":"Before diving into the features..","slug":"before-diving-into-the-features","link":"#before-diving-into-the-features","children":[]},{"level":2,"title":"Functional Interfaces","slug":"functional-interfaces","link":"#functional-interfaces","children":[{"level":3,"title":"Function Interface","slug":"function-interface","link":"#function-interface","children":[]},{"level":3,"title":"Consumer Interface","slug":"consumer-interface","link":"#consumer-interface","children":[]},{"level":3,"title":"Supplier Interface","slug":"supplier-interface","link":"#supplier-interface","children":[]},{"level":3,"title":"Predicate Interface","slug":"predicate-interface","link":"#predicate-interface","children":[]},{"level":3,"title":"Other Interfaces","slug":"other-interfaces","link":"#other-interfaces","children":[]}]}],"git":{"createdTime":1595086229000,"updatedTime":1750112300000,"contributors":[{"name":"Samrat Saha","email":"samizzy18@gmail.com","commits":1}]},"filePathRelative":"blogs/technology/2020/July/java_8_features.md"}');export{b as comp,f as data};
